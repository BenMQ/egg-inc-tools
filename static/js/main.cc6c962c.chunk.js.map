{"version":3,"sources":["app/components/Button.js","app/components/ButtonGroup.js","app/components/Input.js","app/components/utils/suffixes.js","App.js","index.js"],"names":["Button","primary","passedClassName","className","rest","colorClasses","classnames","defaultProps","ButtonGroup","selected","Input","suffixes","K","M","B","T","q","Q","s","S","o","N","d","U","D","Td","valueParseRegex","RegExp","numAbbrShort","NumAbbr","Object","keys","numAbbr","values","map","displayValue","value","precision","abbreviate","displayValueShort","App","useState","eggCountValue","setEggCountValue","contractLength","setContractLength","contractLengthUnit","setContractLengthUnit","eggCount","useMemo","valueString","result","exec","exponent","suffix","calculated","parseFloat","Math","pow","suffixMultiplier","parseValueString","contractLengthInHours","minutes","hours","days","haveValues","type","onChange","target","placeholder","parseInt","lengthOption","onClick","filter","offset","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc6c962c.chunk.js","sourcesContent":["import React from 'react'\nimport t from 'prop-types'\nimport classnames from 'classnames'\n\nconst Button = ({ primary, className: passedClassName, ...rest }) => {\n  const colorClasses = primary\n    ? 'bg-blue-600 hover:bg-blue-700 active:bg-blue-800 text-white'\n    : ''\n\n  return (\n    <button\n      className={classnames(\n        colorClasses,\n        'px-6 py-2 rounded-md',\n        'focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-600 focus:ring-opacity-50',\n        'font-medium text-opacity-90',\n        'select-none shadow-md',\n        passedClassName\n      )}\n      {...rest}\n    />\n  )\n}\nButton.propTypes = {\n  primary: t.bool,\n}\nButton.defaultProps = {\n  primary: false,\n}\n\nexport default Button\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\n\nconst ButtonGroup = ({ className: passedClassName, ...rest }) => {\n  return (\n    <div\n      className={classnames('flex rounded-md shadow-md', passedClassName)}\n      {...rest}\n    />\n  )\n}\n\nButtonGroup.propTypes = {}\n\nButtonGroup.Button = ({ selected, className: passedClassName, ...rest }) => {\n  const colorClasses = selected\n    ? 'bg-blue-600 hover:bg-blue-700 active:bg-blue-800 text-white font-medium'\n    : 'hover:bg-gray-100 active:bg-gray-200 border-grey-200'\n\n  return (\n    <button\n      className={classnames(\n        colorClasses,\n        'px-4 py-1 rounded-none first:rounded-l-md last:rounded-r-md',\n        // 'focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-600 focus:ring-opacity-50',\n        'text-opacity-90',\n        'border',\n        'select-none',\n        passedClassName\n      )}\n      {...rest}\n    />\n  )\n}\n\nexport default ButtonGroup\n","import React from 'react'\nimport t from 'prop-types'\nimport classnames from 'classnames'\n\nconst Input = ({ className: passedClassName, ...rest }) => {\n  return (\n    <input\n      className={classnames(\n        'p-2 rounded-lg',\n        'border-2 border-gray-200',\n        'focus:outline-none focus:border-blue-500',\n        'shadow-md',\n        passedClassName\n      )}\n      {...rest}\n    />\n  )\n}\n\nInput.propTypes = {}\n\nexport default Input\n","import NumAbbr from 'number-abbreviate'\n\nexport const suffixes = {\n  K: 1e3,\n  M: 1e6,\n  B: 1e9,\n  T: 1e12,\n  q: 1e15,\n  Q: 1e18,\n  s: 1e21,\n  S: 1e24,\n  o: 1e27,\n  N: 1e30,\n  d: 1e33,\n  U: 1e36,\n  D: 1e39,\n  Td: 1e42,\n}\n\nexport const suffixDisplay = {\n  1e3: 'Thousand',\n  1e6: 'Million',\n  1e9: 'Billion',\n  1e12: 'Trillion',\n  1e15: 'Quadrillion',\n  1e18: 'Quintillion',\n  1e21: 'Sextillion',\n  1e24: 'Septillion',\n  1e27: 'Octillion',\n  1e30: 'Nonillion',\n  1e33: 'Decillion',\n  1e36: 'Undecillion',\n  1e39: 'Duodecillion',\n  1e42: 'Tredecillion',\n}\n\nconst valueParseRegex = new RegExp(/^((?:\\d|\\.)+)(?:e(\\d+))?(\\w)?$/)\nexport const parseValueString = (valueString) => {\n  const result = valueParseRegex.exec(valueString)\n  if (!result) return null\n\n  const [_, value, exponent, suffix] = result\n\n  let calculated = parseFloat(value)\n\n  if (exponent) {\n    calculated *= Math.pow(10, parseFloat(exponent))\n  }\n\n  if (suffix) {\n    const suffixMultiplier = suffixes[suffix]\n    if (!suffixMultiplier) return null\n    calculated *= suffixMultiplier\n  }\n\n  return calculated\n}\n\nconst numAbbrShort = new NumAbbr(Object.keys(suffixes))\nconst numAbbr = new NumAbbr(Object.values(suffixDisplay).map((s) => ` ${s}`))\nexport const displayValue = (value, precision = 2) =>\n  numAbbr.abbreviate(value, precision)\nexport const displayValueShort = (value, precision = 2) =>\n  numAbbrShort.abbreviate(value, precision)\n","import Button from 'app/components/Button'\nimport ButtonGroup from 'app/components/ButtonGroup'\nimport Input from 'app/components/Input'\nimport {\n  displayValue,\n  displayValueShort,\n  parseValueString,\n} from 'app/components/utils/suffixes'\nimport { useState, useMemo } from 'react'\n\nfunction App() {\n  const [eggCountValue, setEggCountValue] = useState('')\n  const [contractLength, setContractLength] = useState(null)\n  const [contractLengthUnit, setContractLengthUnit] = useState('days')\n\n  const eggCount = useMemo(() => parseValueString(eggCountValue), [\n    eggCountValue,\n  ])\n\n  const contractLengthInHours =\n    contractLength &&\n    contractLength * { minutes: 1 / 60, hours: 1, days: 24 }[contractLengthUnit]\n\n  const haveValues = !!(eggCount && contractLength)\n\n  return (\n    <div className=\"max-w-lg mx-auto mt-3\">\n      <div className=\"border border-gray-300\">\n        <div className=\"bg-gray-200\">\n          <h1 className=\"font-bold text-xl p-4\">\n            What egg laying rate do I need?\n          </h1>\n        </div>\n        <div className=\"p-4 space-y-6 \">\n          <label className=\"flex flex-col font-semibold\">\n            <div className=\"mb-2\">Eggs Required</div>\n            <Input\n              type=\"text\"\n              value={eggCountValue}\n              className={eggCountValue && !eggCount && 'border-red-500'}\n              onChange={({ target: { value } }) => setEggCountValue(value)}\n              placeholder=\"4200, 10K, 5.2B, 6e9, …\"\n            />\n            <div className=\"h-2 text-sm text-gray-500 mt-1 ml-2 font-normal\">\n              {eggCount &&\n                `${displayValue(eggCount, true)} (${displayValueShort(\n                  eggCount\n                )})`}\n            </div>\n          </label>\n          <label className=\"flex flex-col font-semibold py-3\">\n            <div className=\"mb-2\">Contract Length</div>\n            <div className=\"flex space-x-2\">\n              <Input\n                type=\"number\"\n                className=\"flex-grow text-right\"\n                placeholder=\"1, 2, 10, …\"\n                value={contractLength || ''}\n                onChange={({ target: { value } }) =>\n                  setContractLength(parseInt(value, 10) || null)\n                }\n              />\n              <ButtonGroup>\n                {['minutes', 'hours', 'days'].map((lengthOption) => (\n                  <ButtonGroup.Button\n                    key={lengthOption}\n                    selected={contractLengthUnit === lengthOption}\n                    onClick={() => setContractLengthUnit(lengthOption)}\n                  >\n                    {lengthOption}\n                  </ButtonGroup.Button>\n                ))}\n              </ButtonGroup>\n            </div>\n          </label>\n\n          {haveValues && (\n            <table className=\"w-full max-w-sm mx-auto border border-gray-100\">\n              <thead className=\"bg-gray-200 font-medium text-xs text-gray-500 text-center\">\n                <tr>\n                  <th className=\"px-2 py-1\">If you had full chickens...</th>\n                  <th className=\"px-2 py-1\">Egg laying rate needed</th>\n                </tr>\n              </thead>\n              <tbody>\n                {[0, 4, 8, 12, 16, 24, 48, 72]\n                  .filter((offset) => offset < contractLengthInHours)\n                  .map((offset) => (\n                    <tr className=\"text-sm even:bg-gray-100\">\n                      <td className=\"px-2 py-1 border-r-2 border-gray-100\">\n                        {offset ? `${offset} hours in` : 'Instantly'}\n                      </td>\n                      <td className=\"text-right px-2 py-1\">\n                        ~\n                        {displayValueShort(\n                          eggCount / (contractLengthInHours - offset),\n                          0\n                        )}{' '}\n                        eggs/hr\n                      </td>\n                    </tr>\n                  ))}\n              </tbody>\n            </table>\n          )}\n        </div>\n      </div>\n      {/*\n      <label className=\"flex flex-col font-semibold\">\n        Chickens\n        <Input type=\"text\" placeholder=\"4200, 10M, 5.2B, 6e9, …\" />\n      </label>\n      <label className=\"flex flex-col font-semibold\">\n        Egg Lay Rate\n        <Input type=\"text\" placeholder=\"4200, 10M, 5.2B, 6e9, …\" />\n        Per Hour / Per Minute\n      </label>\n      <label className=\"flex flex-col font-semibold\">\n        Internal Hatchery Rate\n        <div className=\"flex\">\n          <Input\n            type=\"text\"\n            className=\"flex-grow\"\n            placeholder=\"4200, 10M, 5.2B, 6e9, …\"\n          />\n          <Button primary>per hour</Button>\n          <Button>per minute</Button>\n        </div>\n      </label>\n      */}\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log)\n"],"sourceRoot":""}