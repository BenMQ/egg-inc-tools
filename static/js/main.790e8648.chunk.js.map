{"version":3,"sources":["app/components/Card.js","app/components/Input.js","app/components/ButtonGroup.js","app/components/utils/suffixes.js","ChickensRequiredCalculator.js","EggLayRateCalculator.js","App.js","index.js"],"names":["Card","title","children","className","Input","passedClassName","rest","classnames","ButtonGroup","Button","selected","colorClasses","suffixes","K","M","B","T","q","Q","s","S","o","N","d","U","D","Td","valueParseRegex","RegExp","parseValueString","valueString","result","exec","value","exponent","suffix","calculated","parseFloat","Math","pow","suffixMultiplier","numAbbrShort","NumAbbr","Object","keys","numAbbr","values","map","displayValue","precision","abbreviate","displayValueShort","ChickensRequiredCalculator","useState","targetLayRateValue","setTargetLayRateValue","targetLayRateUnit","setTargetLayRateUnit","targetLayRate","useMemo","targetLayRatePerHour","currentLayRateValue","setCurrentLayRateValue","currentLayRateUnit","setCurrentLayRateUnit","currentLayRate","currentLayRatePerHour","currentChickenCountValue","setCurrentChickenCountValue","currentChickenCount","haveValues","type","placeholder","onChange","target","lengthOption","onClick","EggLayRateCalculator","eggCountValue","setEggCountValue","contractLength","setContractLength","contractLengthUnit","setContractLengthUnit","eggCount","contractLengthInHours","minutes","hours","days","parseInt","filter","offset","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAsBeA,EAnBF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACrB,OACE,sBAAKC,UAAU,iFAAf,UACGF,GACC,qBAAKE,UAAU,+BAAf,SACE,oBAAIA,UAAU,wDAAd,SACGF,MAINC,M,8BCQQE,EAlBD,SAAC,GAA6C,IAAhCC,EAA+B,EAA1CF,UAA+BG,EAAW,6BACzD,OACE,mCACEH,UAAWI,IACT,iBACA,gDACA,wDACA,+FACA,YACAF,IAEEC,KCXJE,EAAc,SAAC,GAA6C,IAAhCH,EAA+B,EAA1CF,UAA+BG,EAAW,6BAC/D,OACE,iCACEH,UAAWI,IAAW,4BAA6BF,IAC/CC,KAOVE,EAAYC,OAAS,YAAwD,IAArDC,EAAoD,EAApDA,SAAqBL,EAA+B,EAA1CF,UAA+BG,EAAW,wCACpEK,EAAeD,EACjB,8GACA,2HAEJ,OACE,oCACEP,UAAWI,IACTI,EACA,8DACA,yEACA,kCACA,SACA,cACAN,IAEEC,KAKKE,Q,gBCjCFI,EAAW,CACtBC,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,EAAG,KACHC,EAAG,KACHC,EAAG,KACHC,EAAG,KACHC,EAAG,KACHC,EAAG,KACHC,EAAG,KACHC,EAAG,KACHC,EAAG,KACHC,EAAG,KACHC,GAAI,MAoBAC,EAAkB,IAAIC,OAAO,kCACtBC,EAAmB,SAACC,GAC/B,IAAMC,EAASJ,EAAgBK,KAAKF,GACpC,IAAKC,EAAQ,OAAO,KAF2B,kBAIVA,EAJU,GAIrCE,GAJqC,WAI9BC,EAJ8B,KAIpBC,EAJoB,KAM3CC,EAAaC,WAAWJ,GAM5B,GAJIC,IACFE,GAAcE,KAAKC,IAAI,GAAIF,WAAWH,KAGpCC,EAAQ,CACV,IAAMK,EAAmB5B,EAASuB,GAClC,IAAKK,EAAkB,OAAO,KAC9BJ,GAAcI,EAGhB,OAAOJ,GAGHK,EAAe,IAAIC,IAAQC,OAAOC,KAAKhC,IACvCiC,EAAU,IAAIH,IAAQC,OAAOG,OAxCN,CAC3B,IAAK,WACL,IAAK,UACL,IAAK,UACL,KAAM,WACN,KAAM,cACN,KAAM,cACN,KAAM,aACN,KAAM,aACN,KAAM,YACN,KAAM,YACN,KAAM,YACN,KAAM,cACN,KAAM,eACN,KAAM,iBA0BiDC,KAAI,SAAC5B,GAAD,iBAAWA,OAC3D6B,EAAe,SAACf,GAAD,IAAQgB,EAAR,uDAAoB,EAApB,OAC1BJ,EAAQK,WAAWjB,EAAOgB,IACfE,EAAoB,SAAClB,GAAD,IAAQgB,EAAR,uDAAoB,EAApB,OAC/BR,EAAaS,WAAWjB,EAAOgB,ICgGlBG,EApJoB,WAAO,IAAD,EACaC,mBAAS,IADtB,mBAChCC,EADgC,KACZC,EADY,OAEWF,mBAAS,YAFpB,mBAEhCG,EAFgC,KAEbC,EAFa,KAGjCC,EAAgBC,mBAAQ,kBAAM9B,EAAiByB,KAAqB,CACxEA,IAGIM,EACJF,GACAA,EAAgB,CAAE,aAAc,GAAI,WAAY,GAAIF,GATf,EAWeH,mBAAS,IAXxB,mBAWhCQ,EAXgC,KAWXC,EAXW,OAYaT,mBAAS,YAZtB,mBAYhCU,EAZgC,KAYZC,EAZY,KAajCC,EAAiBN,mBAAQ,kBAAM9B,EAAiBgC,KAAsB,CAC1EA,IAGIK,EACJD,GACAA,EAAiB,CAAE,aAAc,GAAI,WAAY,GAAIF,GAnBhB,EAqByBV,mBAAS,IArBlC,mBAqBhCc,EArBgC,KAqBNC,EArBM,KAsBjCC,EAAsBV,mBAC1B,kBAAM9B,EAAiBsC,KACvB,CAACA,IAGGG,KAAgBZ,GAAiBO,GAAkBI,GAEzD,OACE,cAAC,EAAD,CAAMpE,MAAO,+BAAb,SACE,sBAAKE,UAAU,gBAAf,UACE,wBAAOA,UAAU,8BAAjB,UACE,qBAAKA,UAAU,uCAAf,iCAGA,sBAAKA,UAAU,yBAAf,UACE,cAAC,EAAD,CACEoE,KAAK,OACLC,YAAY,+BACZrE,UAAWI,IAAW,wBAAyB,CAC7C,qCACE+C,IAAuBI,IAE3BzB,MAAOqB,EACPmB,SAAU,gBAAaxC,EAAb,EAAGyC,OAAUzC,MAAb,OAA2BsB,EAAsBtB,MAE7D,cAAC,EAAD,UACG,CAAC,aAAc,YAAYc,KAAI,SAAC4B,GAAD,OAC9B,cAAC,EAAYlE,OAAb,CAEEC,SAAU8C,IAAsBmB,EAChCC,QAAS,kBAAMnB,EAAqBkB,IAHtC,SAKGA,GAJIA,WASb,qBAAKxE,UAAU,kDAAf,SACGuD,GAAa,UACTV,EAAaU,GADJ,aACuBP,EACjCO,GAFU,UAOlB,wBAAOvD,UAAU,8BAAjB,UACE,qBAAKA,UAAU,uCAAf,kCAGA,sBAAKA,UAAU,yBAAf,UACE,cAAC,EAAD,CACEoE,KAAK,OACLC,YAAY,+BACZrE,UAAWI,IAAW,YAAa,CACjC,qCACEsD,IAAwBI,IAE5BhC,MAAO4B,EACPY,SAAU,gBAAaxC,EAAb,EAAGyC,OAAUzC,MAAb,OACR6B,EAAuB7B,MAG3B,cAAC,EAAD,UACG,CAAC,aAAc,YAAYc,KAAI,SAAC4B,GAAD,OAC9B,cAAC,EAAYlE,OAAb,CAEEC,SAAUqD,IAAuBY,EACjCC,QAAS,kBAAMZ,EAAsBW,IAHvC,SAKGA,GAJIA,WASb,qBAAKxE,UAAU,kDAAf,SACG8D,GAAc,UACVjB,EAAaiB,GADH,aACuBd,EAClCc,GAFW,UAOnB,wBAAO9D,UAAU,8BAAjB,UACE,qBAAKA,UAAU,uCAAf,mCAGA,cAAC,EAAD,CACEoE,KAAK,OACLC,YAAY,+BACZrE,UAAWI,IAAW,YAAa,CACjC,qCACE4D,IAA6BE,IAEjCpC,MAAOkC,EACPM,SAAU,gBAAaxC,EAAb,EAAGyC,OAAUzC,MAAb,OACRmC,EAA4BnC,MAGhC,qBAAK9B,UAAU,kDAAf,SACGkE,GAAmB,UACfrB,EAAaqB,GADE,aACuBlB,EACvCkB,GAFgB,UAOvBC,GACC,sBAAKnE,UAAU,gDAAf,UACE,qBAAKA,UAAU,+FAAf,iDAGA,qBAAKA,UAAU,mCAAf,SACG6C,EACEY,EAAuBM,EACtBG,cCrCHQ,EApGc,WAAO,IAAD,EACSxB,mBAAS,IADlB,mBAC1ByB,EAD0B,KACXC,EADW,OAEW1B,mBAAS,MAFpB,mBAE1B2B,EAF0B,KAEVC,EAFU,OAGmB5B,mBAAS,QAH5B,mBAG1B6B,EAH0B,KAGNC,EAHM,KAK3BC,EAAWzB,mBAAQ,kBAAM9B,EAAiBiD,KAAgB,CAC9DA,IAGIO,EACJL,GACAA,EAAiB,CAAEM,QAAS,EAAI,GAAIC,MAAO,EAAGC,KAAM,IAAKN,GAErDZ,KAAgBc,IAAYJ,GAElC,OACE,cAAC,EAAD,CAAM/E,MAAO,kCAAb,SACE,sBAAKE,UAAU,gBAAf,UACE,wBAAOA,UAAU,8BAAjB,UACE,qBAAKA,UAAU,uCAAf,2BAGA,cAAC,EAAD,CACEoE,KAAK,OACLtC,MAAO6C,EACP3E,UAAW2E,IAAkBM,GAAY,iBACzCX,SAAU,gBAAaxC,EAAb,EAAGyC,OAAUzC,MAAb,OAA2B8C,EAAiB9C,IACtDuC,YAAY,iCAEd,qBAAKrE,UAAU,kDAAf,SACGiF,GAAQ,UACJpC,EAAaoC,GADT,aACuBjC,EAAkBiC,GADzC,UAIb,wBAAOjF,UAAU,8BAAjB,UACE,qBAAKA,UAAU,uCAAf,6BAGA,sBAAKA,UAAU,wCAAf,UACE,cAAC,EAAD,CACEoE,KAAK,SACLpE,UAAU,YACVqE,YAAY,mBACZvC,MAAO+C,GAAkB,GACzBP,SAAU,gBAAaxC,EAAb,EAAGyC,OAAUzC,MAAb,OACRgD,EAAkBQ,SAASxD,EAAO,KAAO,SAG7C,cAAC,EAAD,CAAa9B,UAAU,UAAvB,SACG,CAAC,UAAW,QAAS,QAAQ4C,KAAI,SAAC4B,GAAD,OAChC,cAAC,EAAYlE,OAAb,CAEEC,SAAUwE,IAAuBP,EACjCC,QAAS,kBAAMO,EAAsBR,IAHvC,SAKGA,GAJIA,cAWdL,GACC,wBAAOnE,UAAU,iDAAjB,UACE,uBAAOA,UAAU,yEAAjB,SACE,+BACE,oBAAIA,UAAU,YAAd,yCACA,oBAAIA,UAAU,YAAd,yCAGJ,gCACG,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,IACxBuF,QAAO,SAACC,GAAD,OAAYA,EAASN,KAC5BtC,KAAI,SAAC4C,GAAD,OACH,qBACExF,UAAU,iFADZ,UAIE,oBAAIA,UAAU,4DAAd,SACGwF,EAAM,UAAMA,EAAN,aAA0B,cAEnC,qBAAIxF,UAAU,uBAAd,UACGgD,EACCiC,GAAYC,EAAwBM,GACpC,GACC,IAJL,eALKA,iBCxEVC,MAXf,WACE,OACE,qBAAKzF,UAAU,0BAAf,SACE,sBAAKA,UAAU,4CAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,UCHR0F,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.790e8648.chunk.js","sourcesContent":["import React from 'react'\nimport t from 'prop-types'\n\nconst Card = ({ title, children }) => {\n  return (\n    <div className=\"w-full border border-gray-300 bg-gray-50 dark:bg-gray-800 dark:border-gray-600\">\n      {title && (\n        <div className=\"bg-gray-200 dark:bg-gray-600\">\n          <h1 className=\"font-bold text-xl p-4 dark:text-white text-opacity-70\">\n            {title}\n          </h1>\n        </div>\n      )}\n      {children}\n    </div>\n  )\n}\n\nCard.propTypes = {\n  title: t.string,\n}\n\nexport default Card\n","import React from 'react'\nimport classnames from 'classnames'\n\nconst Input = ({ className: passedClassName, ...rest }) => {\n  return (\n    <input\n      className={classnames(\n        'p-2 rounded-lg',\n        'border-2 border-gray-200 dark:border-gray-600',\n        'dark:bg-gray-800 dark:text-white dark:text-opacity-95',\n        'focus:outline-none focus:ring-2 focus:ring-white focus:ring-opacity-30 focus:border-gray-600',\n        'shadow-md',\n        passedClassName\n      )}\n      {...rest}\n    />\n  )\n}\n\nInput.propTypes = {}\n\nexport default Input\n","import React from 'react'\nimport classnames from 'classnames'\n\nconst ButtonGroup = ({ className: passedClassName, ...rest }) => {\n  return (\n    <div\n      className={classnames('flex rounded-md shadow-md', passedClassName)}\n      {...rest}\n    />\n  )\n}\n\nButtonGroup.propTypes = {}\n\nButtonGroup.Button = ({ selected, className: passedClassName, ...rest }) => {\n  const colorClasses = selected\n    ? 'bg-gray-600 active:bg-gray-800 text-white font-medium border-gray-600 dark:bg-gray-600 dark:border-gray-600'\n    : 'hover:bg-gray-100 dark:hover:bg-gray-700 dark:active:bg-gray-600 active:bg-gray-200 border-grey-200 dark:border-gray-600'\n\n  return (\n    <button\n      className={classnames(\n        colorClasses,\n        'px-4 py-1 rounded-none first:rounded-l-md last:rounded-r-md',\n        'focus:outline-none focus:ring-2 focus:ring-white focus:ring-opacity-30',\n        'dark:text-white text-opacity-90',\n        'border',\n        'select-none',\n        passedClassName\n      )}\n      {...rest}\n    />\n  )\n}\n\nexport default ButtonGroup\n","import NumAbbr from 'number-abbreviate'\n\nexport const suffixes = {\n  K: 1e3,\n  M: 1e6,\n  B: 1e9,\n  T: 1e12,\n  q: 1e15,\n  Q: 1e18,\n  s: 1e21,\n  S: 1e24,\n  o: 1e27,\n  N: 1e30,\n  d: 1e33,\n  U: 1e36,\n  D: 1e39,\n  Td: 1e42,\n}\n\nexport const suffixDisplay = {\n  1e3: 'Thousand',\n  1e6: 'Million',\n  1e9: 'Billion',\n  1e12: 'Trillion',\n  1e15: 'Quadrillion',\n  1e18: 'Quintillion',\n  1e21: 'Sextillion',\n  1e24: 'Septillion',\n  1e27: 'Octillion',\n  1e30: 'Nonillion',\n  1e33: 'Decillion',\n  1e36: 'Undecillion',\n  1e39: 'Duodecillion',\n  1e42: 'Tredecillion',\n}\n\nconst valueParseRegex = new RegExp(/^((?:\\d|\\.)+)(?:e(\\d+))?(\\w)?$/)\nexport const parseValueString = (valueString) => {\n  const result = valueParseRegex.exec(valueString)\n  if (!result) return null\n\n  const [_, value, exponent, suffix] = result\n\n  let calculated = parseFloat(value)\n\n  if (exponent) {\n    calculated *= Math.pow(10, parseFloat(exponent))\n  }\n\n  if (suffix) {\n    const suffixMultiplier = suffixes[suffix]\n    if (!suffixMultiplier) return null\n    calculated *= suffixMultiplier\n  }\n\n  return calculated\n}\n\nconst numAbbrShort = new NumAbbr(Object.keys(suffixes))\nconst numAbbr = new NumAbbr(Object.values(suffixDisplay).map((s) => ` ${s}`))\nexport const displayValue = (value, precision = 2) =>\n  numAbbr.abbreviate(value, precision)\nexport const displayValueShort = (value, precision = 2) =>\n  numAbbrShort.abbreviate(value, precision)\n","import React, { useMemo, useState } from 'react'\nimport Card from 'app/components/Card'\nimport Input from 'app/components/Input'\nimport ButtonGroup from 'app/components/ButtonGroup'\nimport {\n  displayValue,\n  displayValueShort,\n  parseValueString,\n} from 'app/components/utils/suffixes'\nimport classnames from 'classnames'\n\nconst ChickensRequiredCalculator = () => {\n  const [targetLayRateValue, setTargetLayRateValue] = useState('')\n  const [targetLayRateUnit, setTargetLayRateUnit] = useState('per hour')\n  const targetLayRate = useMemo(() => parseValueString(targetLayRateValue), [\n    targetLayRateValue,\n  ])\n\n  const targetLayRatePerHour =\n    targetLayRate &&\n    targetLayRate * { 'per minute': 60, 'per hour': 1 }[targetLayRateUnit]\n\n  const [currentLayRateValue, setCurrentLayRateValue] = useState('')\n  const [currentLayRateUnit, setCurrentLayRateUnit] = useState('per hour')\n  const currentLayRate = useMemo(() => parseValueString(currentLayRateValue), [\n    currentLayRateValue,\n  ])\n\n  const currentLayRatePerHour =\n    currentLayRate &&\n    currentLayRate * { 'per minute': 60, 'per hour': 1 }[currentLayRateUnit]\n\n  const [currentChickenCountValue, setCurrentChickenCountValue] = useState('')\n  const currentChickenCount = useMemo(\n    () => parseValueString(currentChickenCountValue),\n    [currentChickenCountValue]\n  )\n\n  const haveValues = !!(targetLayRate && currentLayRate && currentChickenCount)\n\n  return (\n    <Card title={'How many chickens do I need?'}>\n      <div className=\"p-4 space-y-6\">\n        <label className=\"flex flex-col font-semibold\">\n          <div className=\"mb-2 dark:text-white text-opacity-80\">\n            Target Egg Lay Rate\n          </div>\n          <div className=\"grid grid-cols-2 gap-2\">\n            <Input\n              type=\"text\"\n              placeholder=\"4200, 10K, 5.2B, 6e9, …\"\n              className={classnames('flex-grow flex-shrink', {\n                'border-red-500 dark:border-red-500':\n                  targetLayRateValue && !targetLayRate,\n              })}\n              value={targetLayRateValue}\n              onChange={({ target: { value } }) => setTargetLayRateValue(value)}\n            />\n            <ButtonGroup>\n              {['per minute', 'per hour'].map((lengthOption) => (\n                <ButtonGroup.Button\n                  key={lengthOption}\n                  selected={targetLayRateUnit === lengthOption}\n                  onClick={() => setTargetLayRateUnit(lengthOption)}\n                >\n                  {lengthOption}\n                </ButtonGroup.Button>\n              ))}\n            </ButtonGroup>\n          </div>\n          <div className=\"h-5 text-sm text-gray-500 mt-1 ml-2 font-normal\">\n            {targetLayRate &&\n              `${displayValue(targetLayRate)} (${displayValueShort(\n                targetLayRate\n              )})`}\n          </div>\n        </label>\n\n        <label className=\"flex flex-col font-semibold\">\n          <div className=\"mb-2 dark:text-white text-opacity-80\">\n            Current Egg Lay Rate\n          </div>\n          <div className=\"grid grid-cols-2 gap-2\">\n            <Input\n              type=\"text\"\n              placeholder=\"4200, 10K, 5.2B, 6e9, …\"\n              className={classnames('flex-grow', {\n                'border-red-500 dark:border-red-500':\n                  currentLayRateValue && !currentLayRate,\n              })}\n              value={currentLayRateValue}\n              onChange={({ target: { value } }) =>\n                setCurrentLayRateValue(value)\n              }\n            />\n            <ButtonGroup>\n              {['per minute', 'per hour'].map((lengthOption) => (\n                <ButtonGroup.Button\n                  key={lengthOption}\n                  selected={currentLayRateUnit === lengthOption}\n                  onClick={() => setCurrentLayRateUnit(lengthOption)}\n                >\n                  {lengthOption}\n                </ButtonGroup.Button>\n              ))}\n            </ButtonGroup>\n          </div>\n          <div className=\"h-5 text-sm text-gray-500 mt-1 ml-2 font-normal\">\n            {currentLayRate &&\n              `${displayValue(currentLayRate)} (${displayValueShort(\n                currentLayRate\n              )})`}\n          </div>\n        </label>\n\n        <label className=\"flex flex-col font-semibold\">\n          <div className=\"mb-2 dark:text-white text-opacity-80\">\n            Current Chicken Count\n          </div>\n          <Input\n            type=\"text\"\n            placeholder=\"4200, 10K, 5.2B, 6e9, …\"\n            className={classnames('flex-grow', {\n              'border-red-500 dark:border-red-500':\n                currentChickenCountValue && !currentChickenCount,\n            })}\n            value={currentChickenCountValue}\n            onChange={({ target: { value } }) =>\n              setCurrentChickenCountValue(value)\n            }\n          />\n          <div className=\"h-5 text-sm text-gray-500 mt-1 ml-2 font-normal\">\n            {currentChickenCount &&\n              `${displayValue(currentChickenCount)} (${displayValueShort(\n                currentChickenCount\n              )})`}\n          </div>\n        </label>\n\n        {haveValues && (\n          <div className=\"border-2 border-blue-100 dark:border-blue-600\">\n            <div className=\"px-2 py-1 bg-blue-200 font-medium text-xs text-opacity-80 text-center bg-blue-600 text-white\">\n              Chickens needed for target lay rate\n            </div>\n            <div className=\"text-center dark:text-white py-2\">\n              {displayValue(\n                (targetLayRatePerHour / currentLayRatePerHour) *\n                  currentChickenCount\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    </Card>\n  )\n}\n\nChickensRequiredCalculator.propTypes = {}\n\nexport default ChickensRequiredCalculator\n","import ButtonGroup from 'app/components/ButtonGroup'\nimport Input from 'app/components/Input'\nimport {\n  displayValue,\n  displayValueShort,\n  parseValueString,\n} from 'app/components/utils/suffixes'\nimport { useState, useMemo } from 'react'\nimport Card from 'app/components/Card'\n\nconst EggLayRateCalculator = () => {\n  const [eggCountValue, setEggCountValue] = useState('')\n  const [contractLength, setContractLength] = useState(null)\n  const [contractLengthUnit, setContractLengthUnit] = useState('days')\n\n  const eggCount = useMemo(() => parseValueString(eggCountValue), [\n    eggCountValue,\n  ])\n\n  const contractLengthInHours =\n    contractLength &&\n    contractLength * { minutes: 1 / 60, hours: 1, days: 24 }[contractLengthUnit]\n\n  const haveValues = !!(eggCount && contractLength)\n\n  return (\n    <Card title={'What egg laying rate do I need?'}>\n      <div className=\"p-4 space-y-6\">\n        <label className=\"flex flex-col font-semibold\">\n          <div className=\"mb-2 dark:text-white text-opacity-80\">\n            Eggs Required\n          </div>\n          <Input\n            type=\"text\"\n            value={eggCountValue}\n            className={eggCountValue && !eggCount && 'border-red-500'}\n            onChange={({ target: { value } }) => setEggCountValue(value)}\n            placeholder=\"4200, 10K, 5.2B, 6e9, …\"\n          />\n          <div className=\"h-5 text-sm text-gray-500 mt-1 ml-2 font-normal\">\n            {eggCount &&\n              `${displayValue(eggCount)} (${displayValueShort(eggCount)})`}\n          </div>\n        </label>\n        <label className=\"flex flex-col font-semibold\">\n          <div className=\"mb-2 dark:text-white text-opacity-80\">\n            Contract Length\n          </div>\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-2\">\n            <Input\n              type=\"number\"\n              className=\"flex-grow\"\n              placeholder=\"1, 2, 10, …\"\n              value={contractLength || ''}\n              onChange={({ target: { value } }) =>\n                setContractLength(parseInt(value, 10) || null)\n              }\n            />\n            <ButtonGroup className=\"mx-auto\">\n              {['minutes', 'hours', 'days'].map((lengthOption) => (\n                <ButtonGroup.Button\n                  key={lengthOption}\n                  selected={contractLengthUnit === lengthOption}\n                  onClick={() => setContractLengthUnit(lengthOption)}\n                >\n                  {lengthOption}\n                </ButtonGroup.Button>\n              ))}\n            </ButtonGroup>\n          </div>\n        </label>\n\n        {haveValues && (\n          <table className=\"w-full max-w-sm mx-auto border border-blue-600\">\n            <thead className=\"font-medium text-xs text-opacity-80 text-center bg-blue-600 text-white\">\n              <tr>\n                <th className=\"px-2 py-1\">If you had full chickens...</th>\n                <th className=\"px-2 py-1\">Egg laying rate needed</th>\n              </tr>\n            </thead>\n            <tbody>\n              {[0, 4, 8, 12, 16, 24, 48, 72]\n                .filter((offset) => offset < contractLengthInHours)\n                .map((offset) => (\n                  <tr\n                    className=\"text-sm even:bg-gray-100 dark:even:bg-gray-700 dark:text-white text-opacity-80\"\n                    key={offset}\n                  >\n                    <td className=\"px-2 py-1 border-r-2 border-gray-100 dark:border-gray-700\">\n                      {offset ? `${offset} hours in` : 'Instantly'}\n                    </td>\n                    <td className=\"text-right px-2 py-1\">\n                      {displayValueShort(\n                        eggCount / (contractLengthInHours - offset),\n                        2\n                      )}{' '}\n                      eggs/hr\n                    </td>\n                  </tr>\n                ))}\n            </tbody>\n          </table>\n        )}\n      </div>\n    </Card>\n  )\n}\n\nEggLayRateCalculator.propTypes = {}\n\nexport default EggLayRateCalculator\n","import ChickensRequiredCalculator from 'ChickensRequiredCalculator'\nimport EggLayRateCalculator from 'EggLayRateCalculator'\n\nfunction App() {\n  return (\n    <div className=\"mx-auto max-w-screen-lg\">\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 m-4\">\n        <EggLayRateCalculator />\n        <ChickensRequiredCalculator />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}